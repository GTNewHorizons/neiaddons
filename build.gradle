buildscript {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    repositories {
        mavenCentral()
	mavenLocal()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.hasProperty('forgeOverride')) {
    config.forge.version = forgeOverride
}

if (project.hasProperty('buildnum')) {
    ext.simpleVersion = "${config.neiaddons.version}.${project.buildnum}"
} else {
    ext.simpleVersion = "${config.neiaddons.version}-DEV"
}

version = simpleVersion + '-mc' + config.minecraft.version

group = "net.bdew"
archivesBaseName = project.name

minecraft {
    version = "1.7.10-10.13.2.1291"
    replace("NEIADDONS_VER", simpleVersion.toString())
}

repositories {
    mavenCentral()
    maven {
        name = "bdew"
        url = "http://jenkins.bdew.net/maven"
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name "waila"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name = "player" // forestry here
        url = "http://maven.ic2.player.to/"
    }
}

dependencies {
    compile "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    compile "codechicken:CodeChickenLib:${config.minecraft.version}-${config.ccl.version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft.version}-${config.ccc.version}:dev"

    compile "net.sengir.forestry:forestry_${config.minecraft.version}:${config.forestry.version}:api"

    compile module("mcp.mobius.waila:Waila:${config.waila.version}_${config.minecraft.version}") {
        transitive = false // WAILA is depending on an invalid combination of CCC/NEI that doesn't run...
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

sourceSets {
    main {
        scala {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
        output.resourcesDir = output.classesDir // Hack for IDEA
    }
}


processResources {
    inputs.property "tokens", minecraft.replacements
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        filter(ReplaceTokens, tokens: minecraft.replacements)
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
    classifier "dev"
    duplicatesStrategy "exclude"
}

jar {
    exclude "**/*.psd"
}

artifacts {
    archives sourceJar
    archives deobfJar
}

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            artifact deobfJar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            url "file://var/www/maven"
        }
    }
}

apply plugin: 'curseforge'

curse {
    projectId = config.curseforge.id
    apiKey = project.hasProperty("curseForgeApiKey") ? project.curseForgeApiKey : ""
    releaseType = 'alpha'

    artifact = jar
    changelog = project.hasProperty("changelog") ? project.changelog : "No changelog available"

    additionalArtifact deobfJar
    additionalArtifact sourceJar

    relatedProject 'notenoughitems': 'optionalLibrary'
    relatedProject 'waila': 'optionalLibrary'
}